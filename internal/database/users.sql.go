// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: users.sql

package database

import (
	"context"

	"github.com/google/uuid"
)

const createUser = `-- name: CreateUser :one
INSERT INTO users (id, created_at, updated_at, email, password_hash)
VALUES (gen_random_uuid(),
        NOW(),
        NOW(),
        $1,
        $2)
RETURNING id, created_at, updated_at, email, password_hash, is_echoes_red
`

type CreateUserParams struct {
	Email        string
	PasswordHash string
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (User, error) {
	row := q.db.QueryRowContext(ctx, createUser, arg.Email, arg.PasswordHash)
	var i User
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Email,
		&i.PasswordHash,
		&i.IsEchoesRed,
	)
	return i, err
}

const deleteAllUsers = `-- name: DeleteAllUsers :exec
DELETE
FROM users
`

func (q *Queries) DeleteAllUsers(ctx context.Context) error {
	_, err := q.db.ExecContext(ctx, deleteAllUsers)
	return err
}

const getUserByEmail = `-- name: GetUserByEmail :one
SELECT id, created_at, updated_at, email, password_hash, is_echoes_red
FROM users
WHERE users.email = $1
`

func (q *Queries) GetUserByEmail(ctx context.Context, email string) (User, error) {
	row := q.db.QueryRowContext(ctx, getUserByEmail, email)
	var i User
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Email,
		&i.PasswordHash,
		&i.IsEchoesRed,
	)
	return i, err
}

const getUserByID = `-- name: GetUserByID :one
SELECT id, created_at, updated_at, email, password_hash, is_echoes_red
FROM users
WHERE users.id = $1
`

func (q *Queries) GetUserByID(ctx context.Context, id uuid.UUID) (User, error) {
	row := q.db.QueryRowContext(ctx, getUserByID, id)
	var i User
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Email,
		&i.PasswordHash,
		&i.IsEchoesRed,
	)
	return i, err
}

const getUserFromRefreshToken = `-- name: GetUserFromRefreshToken :one
SELECT u.id, u.created_at, u.updated_at, u.email, u.password_hash, u.is_echoes_red
FROM users u
         JOIN refresh_tokens rf ON u.id = rf.user_id
WHERE rf.token = $1
`

func (q *Queries) GetUserFromRefreshToken(ctx context.Context, token string) (User, error) {
	row := q.db.QueryRowContext(ctx, getUserFromRefreshToken, token)
	var i User
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Email,
		&i.PasswordHash,
		&i.IsEchoesRed,
	)
	return i, err
}

const updateEchoesRed = `-- name: UpdateEchoesRed :one
UPDATE users
SET updated_at = NOW(),
    is_echoes_red = true
WHERE id = $1
RETURNING id, created_at, updated_at, email, password_hash, is_echoes_red
`

func (q *Queries) UpdateEchoesRed(ctx context.Context, id uuid.UUID) (User, error) {
	row := q.db.QueryRowContext(ctx, updateEchoesRed, id)
	var i User
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Email,
		&i.PasswordHash,
		&i.IsEchoesRed,
	)
	return i, err
}

const updateUserEmailAndPasswordByID = `-- name: UpdateUserEmailAndPasswordByID :one
UPDATE users SET email = $2, password_hash = $3, updated_at = NOW()
WHERE id = $1
RETURNING id, created_at, updated_at, email, password_hash, is_echoes_red
`

type UpdateUserEmailAndPasswordByIDParams struct {
	ID           uuid.UUID
	Email        string
	PasswordHash string
}

func (q *Queries) UpdateUserEmailAndPasswordByID(ctx context.Context, arg UpdateUserEmailAndPasswordByIDParams) (User, error) {
	row := q.db.QueryRowContext(ctx, updateUserEmailAndPasswordByID, arg.ID, arg.Email, arg.PasswordHash)
	var i User
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Email,
		&i.PasswordHash,
		&i.IsEchoesRed,
	)
	return i, err
}
